###############################################################################
# Build ENV needed:
# Self link: https://console.cloud.google.com/cloud-build/triggers?hl=IT&project=palladius-genai
# Self link: https://console.cloud.google.com/cloud-build/triggers;region=global?e=-13802955&mods=logs_tg_staging&project=palladius-genai
#
# Loosely inspired by ror7-tailwind-gemini-news-crawler
# Securing builds: https://cloud.google.com/build/docs/securing-builds/use-secrets
#
# TODO(ricc): 1. make this work with Skaffold using _SKAFFOLD_DEPLOY_UNIT.
# TODO(ricc): 2. enable skaffold cache when all the rest works (makes it faster but need
#             to set up GCS, and permissions, SA, ..)
#
# Note: to enable CB access to SecretManager, you need to click on SA permissions. Note
#       that enablibng Cloud Run required some magical additional access which Im not sure
#       how to reproduce in IAC. See https://screenshot.googleplex.com/4wEvj93LprtUdgU
#
# Step order: https://cloud.google.com/build/docs/configuring-builds/configure-build-step-order
# * We do steps 1,2,3
# * Then all the other steps are executed immediately and in parallel.
###############################################################################

timeout: 1800s # 20min
options:
  # supported machine types: https://cloud.google.com/build/docs/api/reference/rest/v1/projects.builds#machinetype
  machineType: 'E2_HIGHCPU_32'
#  machineType: 'N1_HIGHCPU_8'
  # Cheap project
  #machineType: 'N1_HIGHCPU_32'
  substitution_option: 'ALLOW_LOOSE'
substitutions:
  _REGION: europe-west1 # for Cloud Build.
  _GCLOUD_REGION: europe-west1
  _PROJECT_ID: palladius-genai
  _APP_NAME: gemini-news-crawler
  _SKAFFOLD_DEFAULT_REPO: 'europe-west1-docker.pkg.dev/palladius-genai/gemini-news-crawler'
  _MESSAGGIO_OCCASIONALE: >-
    Ho provato a mettere le E2 per buildare piu veloce vediamo se va.
    Voglio anche provare a mettere dipendenze tra 4,6 e 5,7
images:
- "${_REGION}-docker.pkg.dev/${PROJECT_ID}/gemini-news-crawler/gemini-news-crawler:latest"
- "${_REGION}-docker.pkg.dev/${PROJECT_ID}/gemini-news-crawler/gemini-news-crawler:sha-$SHORT_SHA"

################################################################################
# TODO(ricc): enable availableSecrets as below once Cloud build is able to push again
#             (small iterations).
################################################################################
# availableSecrets:
#   secretManager:
#   #- versionName: projects/${PROJECT_ID}/secrets/myapp_REGION/versions/latest
#   - versionName: projects/myapp-staging-379211/secrets/myapp_REGION/versions/latest
#     env: myapp_REGION
################################################################################


#############################################################
# MAIN phase: all Build steps
#############################################################
steps:

# First I build a docker latest version..
- name: 'gcr.io/cloud-builders/docker'
  #id: 1. Docker Build - to CB_LATEST # might be error prone vs the one create from computer
  id:  'step1 docker build' ##1. Docker Build - to CB_LATEST # might be error prone vs the one create from computer
  args: ['build', '-t', "${_REGION}-docker.pkg.dev/${PROJECT_ID}/gemini-news-crawler/gemini-news-crawler:latest", '.']
  dir: webapp
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'

# Then I tag it with another so it survives multiple builds..
- name: 'gcr.io/cloud-builders/docker'
#  id: 2. Tag latest to vVERSION
  id:  'step2 docker tag'
  args:
    - 'tag'
    - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/gemini-news-crawler/gemini-news-crawler:latest"
    - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/gemini-news-crawler/gemini-news-crawler:sha-$SHORT_SHA"
  dir: webapp

- name: 'gcr.io/cloud-builders/docker'
  #name: 3. Tag from SHA to VERSION - proviamo con Docker
  id: 'step3 tag SHA and VERSION' # The last we need before parallelizing everything
  entrypoint: bash
  args:
  - bin/autotag.sh
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'
  dir: webapp


# Questo finalmente funge!
- name: 'gcr.io/cloud-builders/gcloud'
  id: 4. Push DEV to Cloud Run via Amazing new script which doesnt need mounting anymore
  entrypoint: bash
  args:
  - bin/cb-push-to-cloudrun-magic.sh
  - dev
  dir: webapp
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'
  - 'DATABASE_URL_DEV=$_DATABASE_URL_DEV'
  - 'NEWSAPI_COM_KEY=$_NEWSAPI_COM_KEY'
  - 'GEMINI_KEY=$_GEMINI_KEY'
  # https://guides.rubyonrails.org/debugging_rails_applications.html
  #
  # WARNING !!! DISABLE THIS WHEN THE PROBLEM IS FIXED!!
  #
  #
  - 'RAILS_LOG_LEVEL=debug' # to help debug the system



  # This is just to make sure that PROD only gets pushed when EVERYTHING works!
- name: 'gcr.io/cloud-builders/gcloud'
  id: 4.5. Push STAGING to Cloud Run via new MAGIC script - never tried STAGING before
  entrypoint: bash
  args:
  - bin/cb-push-to-cloudrun-magic.sh
  - staging
  dir: webapp
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'
  - 'DATABASE_URL=$_DATABASE_URL_STAGING'
  - 'OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES'
  - 'NEWSAPI_COM_KEY=$_NEWSAPI_COM_KEY_RICC' # PROD
  - 'RAILS_ENV=staging'
  - 'GEMINI_KEY=$_GEMINI_KEY'

# Questo finalmente funge!
- name: 'gcr.io/cloud-builders/gcloud'
  id: 5. Push PROD to Cloud Run via new MAGIC script # which doesnt need mounting anymore
  entrypoint: bash
  args:
  - bin/cb-push-to-cloudrun-magic.sh
  - prod
  allowFailure: true
  dir: webapp
  env:
  - 'PROJECT_ID=$PROJECT_ID'
  - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'
  - 'DATABASE_URL_PROD=$_DATABASE_URL_PROD'
  - 'OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES'
#  - 'NEWSAPI_COM_KEY=$_NEWSAPI_COM_KEY' # DEV
  - 'NEWSAPI_COM_KEY=$_NEWSAPI_COM_KEY_RICC' # PROD
  - 'RAILS_ENV=production'
  - 'GEMINI_KEY=$_GEMINI_KEY'

# This does NOT work
# - name: 'gcr.io/cloud-builders/gcloud'
#   id: 6. Push DEV-OLD to Cloud run from POOR Env with DB stuff..
#   entrypoint: bash
#   args: [ "bin/cb-push-to-cloudrun-dev.sh" , "latest" ]
#   dir: webapp
#   allowFailure: true
#   env:
#   - 'PROJECT_ID=$PROJECT_ID'
#   - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'
#   - 'DATABASE_URL_DEV=$_DATABASE_URL_DEV'
#   - 'DATABASE_URL_PROD=$_DATABASE_URL_PROD'

# - name: 'gcr.io/cloud-builders/gcloud'
#   id: 7. Push PROD-OLD to Cloud run from POOR Env with DB stuff..
#   entrypoint: bash
#   args:
#   - bin/cb-push-to-cloudrun-prod.sh
#   allowFailure: true
#   dir: webapp
#   env:
#   - 'PROJECT_ID=$PROJECT_ID'
#   - 'RAILS_MASTER_KEY=$_RAILS_MASTER_KEY'
#   - 'DATABASE_URL_DEV=$_DATABASE_URL_DEV'
#   - 'DATABASE_URL_PROD=$_DATABASE_URL_PROD'
#   - 'OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES'

