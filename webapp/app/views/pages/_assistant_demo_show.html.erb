<h2 class="text-2xl font-semibold mb-2">üîé @query: '<%= @query %>'</h2>

<p class="text-base leading-relaxed">Back to <%= link_to "Assistant demo home", '/pages/assistant' %> .</p>
<p class="text-base leading-relaxed">LLM: <%= llm.class.to_s %></p>
<p class="text-base leading-relaxed">LLM authenticated?: <%= llm.authenticated? %></p>
<p class="text-base leading-relaxed">LLM description: <%= llm_description %></p>


<%
#return "todo stiamo facendo l italia qui. llm = #{llm}"
# todo optimize...

   #llm = Langchain::LLM::GoogleVertexAI.new(project_id: ENV["GOOGLE_VERTEX_AI_PROJECT_ID"], region: "us-central1")

@query ||= 'Latest 7 news from Vinitaly'

if (llm.authenticated?)

#llm = Langchain::LLM::GoogleVertexAI.new(
#    project_id: ENV["GOOGLE_VERTEX_AI_PROJECT_ID"],
#    region: "us-central1",
#    default_options: {
#      chat_completion_model_name: "gemini-1.5-pro-latest",
#    }
#)

## Create a new Thread to keep track of the messages
#thread = Langchain::Thread.new

# Instantiate tools
#news_retriever = Langchain::Tool::NewsRetriever.new(api_key: ENV["NEWS_API_KEY"])
news_retriever  = NewsRetriever # instanziato da mo'.
#article_tool = ArticleTool.new
#article_tool = Langchain::Tool::ArticleTool.new
article_tool = ArticleTool.new


  #instructions: "You are a News Assistant. You retrieve information and summarize it for people with a hint of humorous approach. You like to add French words randomly to the conversation to give yourself a tone.",

@assistant = Langchain::Assistant.new(
  llm: llm,
  #thread: thread,
  instructions: "You are a News Assistant.",
  tools: [news_retriever, article_tool]
)

# @x = @assistant.add_message_and_run content: "What are the latest news from Google I/O?", auto_tool_execution: true
@x = @assistant.add_message_and_run( content: @query, auto_tool_execution: true)
@answer1_position = @x.size # So I can print THIS response
@y = @assistant.add_message_and_run(content: "Please save the first article to the DB", auto_tool_execution: true) rescue "Error('#{$!}')"
# rescue []
@answer2_position = @y.size rescue 0 # So I can print THIS response
@z = @assistant.add_message_and_run(content: "If you were able to save that article to the DB, please provide the Carlessian URL", auto_tool_execution: true) rescue "Error('#{$!}')"
%>

<table class="w-full table-auto border-collapse border border-slate-400">
    <caption class="text-center text-xl font-semibold bg-gray-200 p-2">AAA<%#= title %></caption>
    <thead>
      <tr>
        <th class="border border-slate-300 p-2">üîë Role</th>
        <th class="border border-slate-300 p-2">Content</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="border border-slate-300 p-2 bg-green-100"><tt>Role</tt></td>
        <td class="border border-slate-300 p-2 bg-green-100">Conversation</td>
      </tr>
      <% @assistant.messages.each_with_index do |msg,ix| %>
        <tr class="hover:bg-blue-50">
          <td class="border border-slate-300 p-2">
            <tt><%#= ix %>
                <%= render_assistant_role(msg.role).html_safe rescue 'role_err' %>
                <%= msg.role rescue 'role_err' %>
            </tt>
          </td>
          <td class="border border-slate-300 p-2 prose max-w-none text-sm break-words">
            <pre><%= render_assistant_message(msg).html_safe rescue "render_assistant_message ERR: #{$!}" %></pre>
          </td>
          <td class="border border-slate-300 p-2 prose max-w-none text-sm break-words">
            <pre><%= msg.content.force_encoding("UTF-8").html_safe rescue "content_err: #{$!}" %></pre>
          </td>
          <td class="border border-slate-300 p-2 prose max-w-none text-sm break-words">
            <pre><%= msg.inspect rescue 'inspect_err' %></pre>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>

<h2>Computer's last messageüõ¨ </h2>

<div  class="w-full table-auto border-collapse border border-slate-400">

    <div class="border border-slate-300 p-2 prose max-w-none text-sm break-words">
      <b>Answer to Q1: article search</b><br/>
        <%= render_assistant_message @assistant.messages[@answer1_position+1] rescue "Err123 #{$!}" %>
    </div>
    <p class="border border-slate-300 p-2 prose max-w-none text-sm break-words">
      <b>Answer to Q2: add article to ActiveRecord</b><br/>
      <% if @answer2_position > 0 %>
        <%= render_assistant_message @assistant.messages[@answer2_position+1] rescue "Err124 #{$!}" %>
      <% else %>
        ‚ùå Some error hence showing last msg (answer2_position=<%= @answer2_position %>)<br/>
        <%= render_assistant_message(@assistant.messages.last) %>
      <% end  %>
    </p>

</div>

<hr/>



<p class="border border-violet-700 border-4 p-8 prose max-w-none text-sm break-words text-gray-100">
    Gemini text @answer1_position = <%= @answer1_position %>
</p>
<p class="border border-slate-300 p-2 prose max-w-none text-sm break-words">
    Person text @answer2_position = <%= @answer2_position %>
</p>
<h1>@assistant.history</h1>

<pre>
  <%= @assistant.history rescue "@assistant.histroy err: #{$!}" %>
</pre>
<% else %>
  Sorry, looks like this LLM is not authenticated. It would make a barbina figure to call APIs over it.
<% end %>
